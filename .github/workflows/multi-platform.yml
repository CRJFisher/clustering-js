name: Multi-Platform Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  browser-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build browser bundle
        run: npm run build:browser
      
      - name: Install Playwright
        run: |
          npm install --no-save @playwright/test
          npx playwright install chromium
          npx playwright install-deps chromium
      
      - name: Test browser bundle with Playwright
        run: |
          cat > test-browser.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          const path = require('path');

          test('browser bundle loads and initializes', async ({ page }) => {
            // Enable console logging
            page.on('console', msg => console.log('Browser:', msg.text()));
            page.on('pageerror', error => console.error('Browser Error:', error));
            
            // Serve the test file
            await page.goto(`file://${path.join(__dirname, 'test/browser/index.html')}`);
            
            // Wait for tests to complete
            await page.waitForFunction(() => {
              const summaryElements = document.querySelectorAll('.test');
              return Array.from(summaryElements).some(el => 
                el.textContent.includes('All tests passed') || 
                el.textContent.includes('Some tests failed')
              );
            }, { timeout: 30000 });
            
            // Check that all tests passed
            const testsPassed = await page.evaluate(() => {
              const passedElement = Array.from(document.querySelectorAll('.test')).find(
                el => el.textContent.includes('All tests passed')
              );
              return passedElement !== undefined;
            });
            
            expect(testsPassed).toBe(true);
          });

          test('browser backends work correctly', async ({ page }) => {
            await page.goto(`file://${path.join(__dirname, 'test/browser/index.html')}`);
            
            // Wait for page to load
            await page.waitForLoadState('networkidle');
            
            // Test backend initialization (WebGL or CPU)
            const backendResult = await page.evaluate(async () => {
              const { Clustering } = window.ClusteringTFJS;
              
              // Try WebGL first
              try {
                await Clustering.init({ backend: 'webgl' });
              } catch (e) {
                // Fall back to CPU if WebGL not available
                await Clustering.init({ backend: 'cpu' });
              }
              
              const tf = window.tf;
              const backend = tf.getBackend();
              return {
                backend: backend,
                isValid: backend === 'webgl' || backend === 'cpu'
              };
            });
            
            expect(backendResult.isValid).toBe(true);
            console.log(`Browser using backend: ${backendResult.backend}`);
            
            // Test that we can switch to CPU backend
            const cpuResult = await page.evaluate(async () => {
              const { Clustering } = window.ClusteringTFJS;
              await Clustering.init({ backend: 'cpu' });
              const tf = window.tf;
              return {
                backend: tf.getBackend(),
                isCPU: tf.getBackend() === 'cpu'
              };
            });
            expect(cpuResult.isCPU).toBe(true);
          });
          EOF
          npx playwright test test-browser.spec.js

  node-backends-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        backend: [tfjs-node, tfjs]
        node-version: [18.x, 20.x]
        exclude:
          # tfjs-node-gpu only works on Linux
          - os: windows-latest
            backend: tfjs-node-gpu
          - os: macos-latest
            backend: tfjs-node-gpu
        include:
          # Add GPU testing on Linux
          - os: ubuntu-latest
            backend: tfjs-node-gpu
            node-version: 20.x
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Node.js bundle
        run: npm run build:node
      
      - name: Install backend - ${{ matrix.backend }}
        run: |
          # Skip tfjs-node on Windows CI due to native module issues
          if [[ "${{ runner.os }}" == "Windows" && "${{ matrix.backend }}" == "tfjs-node" ]]; then
            echo "Skipping tfjs-node on Windows CI - using tfjs instead"
            npm install @tensorflow/tfjs --no-save
          else
            npm install @tensorflow/${{ matrix.backend }} --no-save
          fi
        if: matrix.backend != 'tfjs-node-gpu'
        shell: bash
      
      - name: Skip GPU backend test
        run: echo "Skipping GPU backend test on GitHub Actions (no CUDA)"
        if: matrix.backend == 'tfjs-node-gpu'
      
      - name: Test Node.js build with ${{ matrix.backend }}
        if: matrix.backend != 'tfjs-node-gpu'
        run: |
          # Determine actual backend to use (tfjs on Windows instead of tfjs-node)
          if [[ "${{ runner.os }}" == "Windows" && "${{ matrix.backend }}" == "tfjs-node" ]]; then
            ACTUAL_BACKEND="tfjs"
          else
            ACTUAL_BACKEND="${{ matrix.backend }}"
          fi
          
          cat > test-node-platform.js << EOF
          console.log('=== Test Environment ===');
          console.log('Platform:', process.platform);
          console.log('Node version:', process.version);
          console.log('Requested backend:', '${{ matrix.backend }}');
          console.log('Actual backend:', '${ACTUAL_BACKEND}');
          console.log('Working directory:', process.cwd());
          
          // Check if tensorflow backend is installed
          try {
            const backendPath = require.resolve('@tensorflow/${ACTUAL_BACKEND}');
            console.log('Backend found at:', backendPath);
          } catch (e) {
            console.error('Backend not found:', e.message);
          }
          
          let Clustering;
          try {
            const bundle = require('./dist/clustering.node.js');
            Clustering = bundle.Clustering;
            console.log('Bundle loaded successfully');
          } catch (error) {
            console.error('Failed to load bundle:', error.message);
            console.error('Stack:', error.stack);
            process.exit(1);
          }
          
          async function test() {
            try {
              // Initialize
              await Clustering.init();
              console.log('Platform:', Clustering.platform);
              console.log('Features:', Clustering.features);
              
              // Test KMeans
              const kmeans = new Clustering.KMeans({ nClusters: 2 });
              const data = [[0, 0], [1, 1], [10, 10], [11, 11]];
              await kmeans.fit(data);
              
              console.log('KMeans test passed');
              console.log('Centroids:', kmeans.centroids_);
              
              // Test SpectralClustering
              const spectral = new Clustering.SpectralClustering({ nClusters: 2 });
              await spectral.fit(data);
              console.log('SpectralClustering test passed');
              
              process.exit(0);
            } catch (error) {
              console.error('Test failed:', error.message);
              console.error('Stack:', error.stack);
              process.exit(1);
            }
          }
          
          test();
          EOF
          node test-node-platform.js
        shell: bash

  size-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build all targets
        run: npm run build:multi
      
      - name: Check bundle sizes
        run: |
          echo "=== Bundle Sizes ==="
          echo "Browser bundle: $(ls -lh dist/clustering.browser.js | awk '{print $5}')"
          echo "Node.js bundle: $(ls -lh dist/clustering.node.js | awk '{print $5}')"
          echo "Standard build: $(ls -lh dist/index.js | awk '{print $5}')"
          
          # Fail if browser bundle is too large (>100KB)
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            BROWSER_SIZE=$(stat -f%z dist/clustering.browser.js)
          else
            BROWSER_SIZE=$(stat -c%s dist/clustering.browser.js)
          fi
          if [ $BROWSER_SIZE -gt 102400 ]; then
            echo "ERROR: Browser bundle is too large (>100KB)"
            exit 1
          fi